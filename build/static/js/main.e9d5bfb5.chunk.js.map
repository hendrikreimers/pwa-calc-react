{"version":3,"sources":["Classes/Components/Grid/Row.js","Classes/Components/Grid/Column.js","Classes/Components/Calculator/Result.js","Classes/Components/Calculator/Button.js","Classes/Components/Calculator/KeyPad.js","Classes/Utility/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Row","probs","data","className","props","maxHeight","this","children","React","Component","Column","size","bgColor","additionalClassName","Result","id","value","Button","handleClick","e","preventDefault","stopPropagation","onClick","currentTarget","dataset","render","data-type","type","data-action","action","text","color","bind","KeyPad","Calculator","parent","initialize","operatorFunctionSet","a","b","valueBuffer","number","setState","result","parseFloat","state","toString","operatorSign","handlePrevOperator","operator","percentInFloatNumber","prevVal","curVal","calculatedResult","actionSign","handlePrevAction","CalculatorUtility","App","onClickHandle","btn","payload","handleOperator","handleAction","addNumber","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e9d5bfb5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Row extends React.Component {\r\n    constructor(probs) {\r\n        super(probs);\r\n\r\n        this.data = {};\r\n        this.data.className = 'row max-height mh-' + this.props.maxHeight;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.data.className}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Column extends React.Component {\r\n    constructor(probs) {\r\n        super(probs);\r\n\r\n        this.data = {};\r\n        this.data.className = 'col-' + this.props.size + ' bg-' + this.props.bgColor + ' ' + this.props.additionalClassName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.data.className}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Row from '../Grid/Row';\r\nimport Column from \"../Grid/Column\";\r\n\r\n/**\r\n * Component: Result Field\r\n */\r\nexport default class Result extends React.Component {\r\n\r\n    /**\r\n     * Render function not written shorthand\r\n     *\r\n     * @returns {*}\r\n     */\r\n    render() {\r\n        return (\r\n\r\n            <Row maxHeight=\"2\">\r\n                <Column size=\"12\" bgColor=\"dark\" additionalClassName=\"txt-white result\">\r\n                    <span className=\"align-bottom\" id=\"value\">{this.props.value}</span>\r\n                </Column>\r\n            </Row>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\n/**\r\n * Component: BUTTON\r\n */\r\nexport default class Button extends React.Component {\r\n    /**\r\n     * Component Constructor\r\n     *\r\n     * @param probs\r\n     */\r\n    constructor(probs) {\r\n        super(probs);\r\n\r\n        // define some generated constants\r\n        const color = ( this.props.bgColor === 'orange' ) ? 'orange txt-white' : this.props.bgColor,\r\n              size  = ( this.props.action === '0' ) ? '6' : '3';\r\n\r\n        // Bind some new data, we don't need this as a state\r\n        this.data = {};\r\n        this.data.className = 'btn col-' + size + ' bg-' + color;\r\n\r\n        // bind this to the click handlers\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Click Event Handler\r\n     *\r\n     * @param e\r\n     */\r\n    handleClick = e => {\r\n        // Prevent any other default click handling\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        // pass the event to the parent component\r\n        // IMPORTANT: use .currentTarget not .target or you get the <span> on clicking on it\r\n        this.props.onClick(e.currentTarget, e.currentTarget.dataset);\r\n    };\r\n\r\n    /**\r\n     * Render function written shorthand\r\n     *\r\n     * @returns {*}\r\n     */\r\n    render = () => (\r\n\r\n        <div onClick={this.handleClick} className={this.data.className} data-type={this.props.type} data-action={this.props.action}>\r\n            <span className=\"align-middle\">{this.props.text}</span>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Row from '../Grid/Row';\r\nimport Button from './Button';\r\n\r\n/**\r\n * Component: KEYPAD\r\n */\r\nexport default class KeyPad extends React.Component {\r\n\r\n    /**\r\n     * Render function written shorthand and wrapped\r\n     * with an empty tag, because it must a return a single one in JSX\r\n     *\r\n     * @returns {*}\r\n     */\r\n    render = () => (<>\r\n\r\n        <Row maxHeight=\"1\">\r\n            <Button onClick={this.props.onClick} bgColor=\"gray\" type=\"act\" action=\"C\" text=\"C\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"gray\" type=\"act\" action=\"+/-\" text=\"&plusmn;\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"gray\" type=\"op\" action=\"%\" text=\"%\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"orange\" type=\"op\" action=\"/\" text=\"&divide;\" />\r\n        </Row>\r\n        <Row maxHeight=\"1\">\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"7\" text=\"7\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"8\" text=\"8\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"9\" text=\"9\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"orange\" type=\"op\" action=\"*\" text=\"&times;\" />\r\n        </Row>\r\n        <Row maxHeight=\"1\">\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"4\" text=\"4\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"5\" text=\"5\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"6\" text=\"6\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"orange\" type=\"op\" action=\"-\" text=\"&minus;\" />\r\n        </Row>\r\n        <Row maxHeight=\"1\">\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"1\" text=\"1\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"2\" text=\"2\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"3\" text=\"3\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"orange\" type=\"op\" action=\"+\" text=\"+\" />\r\n        </Row>\r\n        <Row maxHeight=\"1\">\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"val\" action=\"0\" text=\"0\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"lightgray\" type=\"op\" action=\",\" text=\"&#44;\" />\r\n            <Button onClick={this.props.onClick} bgColor=\"orange\" type=\"act\" action=\"=\" text=\"=\" />\r\n        </Row>\r\n\r\n    </>);\r\n}","export default class Calculator {\r\n\r\n    /**\r\n     * Class Constructor\r\n     *\r\n     * @param parent\r\n     */\r\n    constructor(parent) {\r\n        // Save the APP Parent Object\r\n        this.parent = parent;\r\n\r\n        // Start init\r\n        this.initialize();\r\n    }\r\n\r\n    /**\r\n     * Initializes class\r\n     *\r\n     */\r\n    initialize() {\r\n        // Define the operator function set\r\n        this.operatorFunctionSet = {\r\n            '*': (a, b) => a * b,\r\n            '/': (a, b) => a / b,\r\n            '+': (a, b) => a + b,\r\n            '-': (a, b) => a - b,\r\n            '%': (a, b) => (a / 100) * b\r\n        }\r\n\r\n        // Set the value buffer\r\n        this.data = {};\r\n        this.data.valueBuffer = 0;\r\n    }\r\n\r\n    /**\r\n     * add a number to the result state of the app\r\n     *\r\n     * @param number\r\n     */\r\n    addNumber(number) {\r\n        // attach to the state the number\r\n        this.parent.setState({\r\n            result: parseFloat(this.parent.state.result + '' + number).toString()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles an operator sign (Plus [+], Minus [-], Percentage [%], ...)\r\n     *\r\n     * @param operatorSign\r\n     */\r\n    handleOperator(operatorSign) {\r\n        switch ( operatorSign ) {\r\n\r\n            case ',':\r\n                this.parent.setState({\r\n                    result: this.parent.state.result + '.'\r\n                });\r\n                break;\r\n\r\n            case '+':\r\n            case '-':\r\n            case '*':\r\n            case '/':\r\n                this.handlePrevOperator();\r\n\r\n                this.data.valueBuffer = this.parent.state.result;\r\n\r\n                this.parent.setState({\r\n                    result: 0,\r\n                    operator: operatorSign\r\n                });\r\n\r\n                break;\r\n\r\n            case '%':\r\n                // Change percentage to floating number\r\n                const percentInFloatNumber = (parseFloat(this.data.valueBuffer) / 100) * parseFloat(this.parent.state.result);\r\n\r\n                // Switch current value from percent to floating number\r\n                this.parent.setState({\r\n                    result: percentInFloatNumber\r\n                });\r\n\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires the previous operator, which is still in the buffer but not fired\r\n     * because the user needs to place the second part (numbers)\r\n     *\r\n     */\r\n    handlePrevOperator() {\r\n        if ( (this.parent.state.operator !== null) && (this.parent.state.operator !== '%') ) {\r\n            // Get the current values\r\n            const prevVal = parseFloat(this.data.valueBuffer),\r\n                  curVal  = parseFloat(this.parent.state.result);\r\n\r\n            // Calculate\r\n            const calculatedResult = parseFloat(this.operatorFunctionSet[this.parent.state.operator](prevVal, curVal));\r\n\r\n            // Set new state\r\n            this.parent.setState({\r\n                result: calculatedResult,\r\n                operator: null\r\n            });\r\n\r\n            // Reset buffer\r\n            this.data.valueBuffer = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an action sign (Clear [C], Result [=], ...)\r\n     *\r\n     * @param actionSign\r\n     */\r\n    handleAction(actionSign) {\r\n        switch ( actionSign ) {\r\n            case 'C':\r\n                this.handlePrevAction();\r\n\r\n                this.data.valueBuffer = 0;\r\n\r\n                this.parent.setState({\r\n                    result: 0,\r\n                    operator: null\r\n                });\r\n\r\n                break;\r\n\r\n            case '+/-':\r\n                this.parent.setState({\r\n                    result: parseFloat(this.parent.state.result * -1)\r\n                });\r\n\r\n                break;\r\n\r\n            case '=':\r\n                this.handlePrevAction();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires the previous action, which is still in the buffer but not fired\r\n     * because the user needs to place the second part (numbers)\r\n     *\r\n     */\r\n    handlePrevAction() {\r\n        this.handlePrevOperator();\r\n    }\r\n\r\n}","import React from 'react';\nimport Result from './Classes/Components/Calculator/Result';\nimport KeyPad from './Classes/Components/Calculator/KeyPad';\nimport Calculator from \"./Classes/Utility/Calculator\";\n\n// Import (S)CSS\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './Resources/Scss/App.scss';\n\n// Init class instance holder\nlet CalculatorUtility = null;\n\n/**\n * APP: Calculator\n */\nexport default class App extends React.Component {\n    /**\n     * Component Constructor\n     */\n    constructor() {\n        // Call parent constructor\n        super();\n\n        // Init Calculator class\n        CalculatorUtility = new Calculator(this);\n\n        // Set default state values\n        this.state = {\n            result: 0,\n            operator: null\n        }\n    }\n\n    /**\n     * Main Click handler function\n     *\n     * @param btn\n     * @param payload\n     */\n    onClickHandle = (btn,payload) => {\n        switch ( payload.type ) {\n\n            case 'op':\n                CalculatorUtility.handleOperator(payload.action);\n                break;\n\n            case 'act':\n                CalculatorUtility.handleAction(payload.action);\n                break;\n\n            case 'val':\n                CalculatorUtility.addNumber(payload.action);\n                break;\n\n            default:\n                break;\n        }\n    };\n\n    /**\n     * Render function\n     *\n     * @returns {*}\n     */\n    render = () => (\n\n        <div id=\"calc\" className=\"container-fluid max-height\">\n            <Result value={this.state.result} />\n            <KeyPad onClick={this.onClickHandle} />\n        </div>\n\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Resources/Css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}